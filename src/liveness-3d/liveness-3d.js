import React, { useEffect, useState } from 'react';
import { FaceCaptcha } from '@oiti/facecaptcha-core';
import { Button, Col, Row } from 'react-bootstrap';
import { Link } from 'react-router-dom';
import FacetecLogo from '../assets/img/FaceTec_Logo.png';
import axios from 'axios';
import { FaceTecSDK } from '../../core-sdk/FaceTecSDK.js/FaceTecSDK';

import { Config } from '../Config';
import { SampleAppUtilities } from '../../core/utilities/SampleAppUtilities';
import * as FaceTecStringsPtBr from '../../core/core-sdk-optional/FaceTecStrings.pt-br';
  
const defaultState = {
  status: 'Inicializando...',
  resultProductKey: '',
  resultSessionToken: '',
  latestProcessor: '',
  deviceKeyIdentifier: 'dF2CabwQ6OCLFJaV2QqZhP7OUErHv0uz',
  publicFaceScanEncryptionKey:
    '-----BEGIN PUBLIC KEY-----\n' +
    'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5PxZ3DLj+zP6T6HFgzzk\n' +
    'M77LdzP3fojBoLasw7EfzvLMnJNUlyRb5m8e5QyyJxI+wRjsALHvFgLzGwxM8ehz\n' +
    'DqqBZed+f4w33GgQXFZOS4AOvyPbALgCYoLehigLAbbCNTkeY5RDcmmSI/sbp+s6\n' +
    'mAiAKKvCdIqe17bltZ/rfEoL3gPKEfLXeN549LTj3XBp0hvG4loQ6eC1E1tRzSkf\n' +
    'GJD4GIVvR+j12gXAaftj3ahfYxioBH7F7HQxzmWkwDyn3bqU54eaiB7f0ftsPpWM\n' +
    'ceUaqkL2DZUvgN0efEJjnWy5y1/Gkq5GGWCROI9XG/SwXJ30BbVUehTbVcD70+ZF\n' +
    '8QIDAQAB\n' +
    '-----END PUBLIC KEY-----',
};

const Liveness3D = () => {
  const [ownState, setOwnState] = useState(defaultState);

  const staticAppKey =
    'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJjZXJ0aWZhY2UiLCJ1c2VyIjoiNEY2QzdBOERDRDU3MTM3ODM0RUYxQ0U2MTc3MjA2OTgxMEMwfGxheW91dC5tb2JpbGUiLCJlbXBDb2QiOiIwMDAwMDAwMDAxIiwiZmlsQ29kIjoiMDAwMDAwMjU3OCIsImNwZiI6IjMwODA0OTc1ODkyIiwibm9tZSI6IkExNDIzMTMwQUUzNkU1NzQ1RDE3NEI5NDk5NTI5QzFFODY5OTdDMzA2MERGMTg1MUQ3ODhCMzVBOEJCOEJCRDlFM3xOTyBURVNURSAwMSBGRFNGU0RGU0RGU0RGRFNGU0RGU0RGU0RGRFNGU0RGU0RGU0RGU0RGU0RGU0RGIEZEU0ZTREZTREZTREZTREZTREZEU0ZEUyIsIm5hc2NpbWVudG8iOiIwMS8wMS8yMDAxIiwiZWFzeS1pbmRleCI6IkFBQUFFbjNZdXhVOHJqV0pVZ09JQTdKdXJEYk1zSEsrOVJDdVBBVWVCMkVCY25wbnJFNmRnM0JIVU15My9RPT0iLCJrZXkiOiJUM1YwSUcxaGVTQm1aWGNnYm05eWRHaDNZWEprSUdKbGJHbGxkbWx1WnlCaGRIUT0iLCJleHAiOjE2NzgzOTIyOTIsImlhdCI6MTY3ODM5MTk5Mn0.9sLW687HMk686TUqjj5M5ioahHfjd2UHaIlkGXQBEPY'

    
  const staticUserAgent = FaceTecSDK.createFaceTecAPIUserAgentString('');

  const loadAssets = () => {
    // Defina um caminho de diretório para outros recursos do FaceTec Browser SDK.
    FaceTecSDK.setResourceDirectory(
      '../../core-sdk/FaceTecSDK.js/resources'
    );

    // Defina o caminho do diretório para as imagens necessárias do FaceTec Browser SDK.
    FaceTecSDK.setImagesDirectory('../../core-sdk/FaceTec_images');

    // Defina as personalizações do FaceTec Device SDK.
    // ThemeHelpers.setAppTheme(ThemeHelpers.getCurrentTheme());

    // Initialize FaceTec Browser SDK and configure the UI features.
    Config.initializeFromAutogeneratedConfig(
      FaceTecSDK,
      function (initializedSuccessfully) {
        if (initializedSuccessfully) {
          SampleAppUtilities.enableControlButtons();
        }

        SampleAppUtilities.displayStatus(
          FaceTecSDK.getFriendlyDescriptionForFaceTecSDKStatus(
            FaceTecSDK.getStatus()
          )
        );
      },
      ownState.resultProductKey,
      ownState.deviceKeyIdentifier,
      ownState.publicFaceScanEncryptionKey
    );

    // Inicialize o FaceTec Browser SDK e configure os recursos da interface do usuário.
    FaceTecSDK.initializeInProductionMode(
      ownState.resultProductKey,
      ownState.deviceKeyIdentifier,
      ownState.publicFaceScanEncryptionKey,
      function (initializedSuccessfully) {
        if (initializedSuccessfully) {
          SampleAppUtilities.enableControlButtons();

          //FaceTecSDK.configureLocalization({"localizationJSON": "br"});

          // Set localization
          FaceTecSDK.configureLocalization(FaceTecStringsPtBr);
        }
        SampleAppUtilities.displayStatus(
          FaceTecSDK.getFriendlyDescriptionForFaceTecSDKStatus(
            FaceTecSDK.getStatus()
          )
        );
      }
    );

    SampleAppUtilities.formatUIForDevice();
  };

  const getProductionKey = async () => {
    const facecaptchaService = new FaceCaptcha(axios, {
      BaseURL: "https://comercial.certiface.com.br",
    });

    const result = await facecaptchaService.getProductionKey({
      appKey: staticAppKey,
    });

    setOwnState({
      ...ownState,
      resultProductKey: result.productionKey,
    });

    // loadAssets();
  };

  const getSessionToken = async () => {
    const facecaptchaService = new FaceCaptcha(axios, {
      BaseURL: "https://comercial.certiface.com.br",
    });

    const result = await facecaptchaService.getSessionToken({
      appkey: staticAppKey,
      userAgent: staticUserAgent,
    });

    setOwnState({
      ...ownState,
      resultSessionToken: result.sessionToken,
    });

    loadAssets();

    // LivenessCheckProcessor(result.sessionToken, Liveness3D);

    // const constructor = {
    //   latestNetworkRequest: new XMLHttpRequest(),
    //   latestSessionResult: null,
    //   success: false,
    //   sampleAppControllerReference: {},
    // }

    // FaceTecSDK.FaceTecSession(this, result.sessionToken);
  };

  // Inicie um 3D Liveness Check.
  const onLivenessCheckPressed = () => {
    // SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
    // // Obtenha um token de sessão do FaceTec SDK e inicie o 3D Liveness Check.
    // getSessionToken((sessionToken) => {
    //   latestProcessor = new LivenessCheckProcessor(sessionToken, sampleApp);
    // });
    //

    // new FaceTecSDK.FaceTecSession(this, ownState.resultSessionToken);
    getSessionToken();
  };

  const showLiveness3D = () => {
    onLivenessCheckPressed();
  };

  useEffect(() => {
    getProductionKey();
  }, []);

  return (
    <Row>
      <Col xs={12} className="mt-4">
        <Link to="/">Voltar</Link>
      </Col>
      <Col xs={12} className="my-4">
        <div className="wrapping-box-container">
          <div id="controls" className="controls">
            <Button
              id="liveness-button"
              variant="primary"
              className="btn-rounded"
              onClick={() => showLiveness3D()}
              // disabled
            >
              3D Liveness Check
            </Button>
            <p id="status" className="mt-2">
              {ownState.status}
            </p>
            <hr />
            <div id="custom-logo-container">
              <img src={FacetecLogo} alt="Logo Facetec" />
            </div>
          </div>
        </div>
      </Col>
    </Row>
  );
};

export default Liveness3D;
